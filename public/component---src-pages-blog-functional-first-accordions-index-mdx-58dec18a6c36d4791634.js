(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{oXak:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return s})),n.d(t,"default",(function(){return c}));n("91GP"),n("rGqo"),n("yt8O"),n("Btvt"),n("RW0V"),n("FdF9");var o=n("7ljp"),a=n("wpQe");n("qKvR");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}var s={},l={_frontmatter:s},r=a.a;function c(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,["components"]);return Object(o.b)(r,i({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Update (December 2019):")),Object(o.b)("p",{parentName:"blockquote"},"In the year since I’ve wrote this, it’s become increasingly clear that this is not a good method for building accordions. Beyond all the work it takes to make the thing functional (you know, the point of this post), ",Object(o.b)("a",i({parentName:"p"},{href:"https://daverupert.com/2019/12/why-details-is-not-an-accordion/"}),"Dave Rupert recently wrote a short post detailing the accessibility shortcomings of this approach"),". I share Dave’s opinion that the web, as a platform, needs to bring some of these common controls to the table to ensure a consistent, accessible experience for all of its users.")),Object(o.b)("p",null,"There are few UI components encountered as frequently as the accordion. Even if you’re unfamiliar with the term, you’re familiar with the pattern: a string of text, sometimes accompanied by a button or icon, that reveals more content underneath when clicked. Thousands of developers and hundreds of UI frameworks have created accordions, often with their own rigid markup structures and (potentially bloated) JavaScript. But did you know that a perfectly functional accordion component ships with ",Object(o.b)("a",i({parentName:"p"},{href:"https://caniuse.com/#feat=details"}),"most modern browsers"),"? Check this out:"),Object(o.b)("details",null,Object(o.b)("summary",null,"This is my cool accordion"),Object(o.b)("p",null,"100% HTML, baby. #usetheplatform")),Object(o.b)("p",null,"That’s all HTML! The code looks like this:"),Object(o.b)("pre",null,Object(o.b)("code",i({parentName:"pre"},{className:"language-html"}),"<details>\n  <summary>This is my cool accordion</summary>\n\n  <p>100% HTML, baby. #usetheplatform</p>\n</details>\n")),Object(o.b)("p",null,"The element that helps us achieve this marvel of modern engineering is called ",Object(o.b)("a",i({parentName:"p"},{href:"http://developer.mozilla.org/en-US/docs/Web/HTML/Element/details"}),Object(o.b)("inlineCode",{parentName:"a"},"details"))," (along with ",Object(o.b)("inlineCode",{parentName:"p"},"summary")," to set custom titles). It allows us to create content that is not visible until the element is clicked on. Sounds like an accordion to me!"),Object(o.b)("p",null,"Of course, there are some downsides to the ",Object(o.b)("inlineCode",{parentName:"p"},"details")," element. For starters, it isn’t exactly what I’d call attractive. There’s no way to animate content in and out, and no way to adjust the “twistie” (the triangle icon that indicates the component state). In addition, working in ",Object(o.b)("em",{parentName:"p"},"most")," modern browsers means that it doesn’t work in ",Object(o.b)("em",{parentName:"p"},"all")," modern browsers, not to mention legacy browsers. But, much like our UI framework-developing forebears, we can use some CSS & JavaScript to solve those issues, with the added benefit of an accordion that works when JavaScript (and even CSS!) is disabled."),Object(o.b)("h2",null,"The Beauty Is in the Details"),Object(o.b)("p",null,"The first and easiest changes we should make just involve making the element display consistently in all browsers."),Object(o.b)("pre",null,Object(o.b)("code",i({parentName:"pre"},{className:"language-css"}),"details {\n  display: block;\n}\nsummary {\n  display: list-item;\n}\n")),Object(o.b)("p",null,"Similarly easy, though a little more opinionated, is changing the cursor to highlight that the element is interactive."),Object(o.b)("pre",null,Object(o.b)("code",i({parentName:"pre"},{className:"language-css"}),"summary {\n  cursor: pointer;\n}\n")),Object(o.b)("p",null,"Now let’s get into the fun stuff. First up is changing the default twistie to be something closer to convention."),Object(o.b)("pre",null,Object(o.b)("code",i({parentName:"pre"},{className:"language-css"}),"/* Hide the default twistie */\n/* Spec-compliant: */\nsummary {\n  list-style-type: none;\n}\n/* Non-standard: */\nsummary::-webkit-details-marker {\n  display: none;\n}\n\n/* Display a more common one */\nsummary {\n  position: relative;\n  padding-right: 1.5rem;\n}\nsummary::after {\n  content: '+';\n  position: absolute;\n  top: calc(50% - 0.5em);\n  right: 0;\n}\ndetails[open] summary::after {\n  content: '-';\n}\n")),Object(o.b)("p",null,Object(o.b)("a",i({parentName:"p"},{href:"https://codepen.io/lowmess/pen/zMjagE"}),"Here’s the accordion")," as it looks at this point:"),Object(o.b)("iframe",{height:"300",scrolling:"no",title:"Details Accordion (CSS Resets Only)",src:"//codepen.io/lowmess/embed/zMjagE/?height=300&theme-id=22727&default-tab=result",frameBorder:"no",allowtransparency:"true",allowFullScreen:"true",style:{width:"100%"}},"See the Pen ",Object(o.b)("a",{href:"https://codepen.io/lowmess/pen/zMjagE/"},"Details Accordion (CSS Resets Only)")," by Alec Lomas (",Object(o.b)("a",{href:"https://codepen.io/lowmess"},"@lowmess"),") on ",Object(o.b)("a",{href:"https://codepen.io"},"CodePen"),"."),Object(o.b)("p",null,"Not bad for a few lines of CSS! There’s a few more changes I would make before calling this anything approaching good-looking, though."),Object(o.b)("pre",null,Object(o.b)("code",i({parentName:"pre"},{className:"language-css"}),"details {\n  border-bottom: 1px solid #eee;\n  padding: 1rem;\n}\n:not(details) + details,\ndetails:first-of-type {\n  border-top: 1px solid #eee;\n}\n\nsummary {\n  margin-bottom: 0;\n  font-weight: 700;\n}\nsummary + * {\n  margin-top: 1rem;\n}\n")),Object(o.b)("p",null,Object(o.b)("a",i({parentName:"p"},{href:"https://codepen.io/lowmess/pen/eQrjBG"}),"Now we’ve got a relatively attractive accordion component"),". We could stop now, and we would have a working component that, with a few tweaks, could be dropped onto almost any site and Just Work™️."),Object(o.b)("iframe",{height:"300",scrolling:"no",title:"Details Accordion (Base Styles)",src:"//codepen.io/lowmess/embed/eQrjBG/?height=300&theme-id=22727&default-tab=result",frameBorder:"no",allowtransparency:"true",allowFullScreen:"true",style:{width:"100%"}},"See the Pen ",Object(o.b)("a",{href:"https://codepen.io/lowmess/pen/eQrjBG/"},"Details Accordion (Base Styles)")," by Alec Lomas (",Object(o.b)("a",{href:"https://codepen.io/lowmess"},"@lowmess"),") on ",Object(o.b)("a",{href:"https://codepen.io"},"CodePen"),"."),Object(o.b)("h2",null,"Enchanting Progressive Enhancement"),Object(o.b)("p",null,"We don’t want to be outdone by those UI frameworks of yore, though. So we’ll need to do a little more work to animate the content in and out. The base markup does have to be changed to be a little less clean, and we’ll need some new CSS."),Object(o.b)("pre",null,Object(o.b)("code",i({parentName:"pre"},{className:"language-html"}),'<details>\n  <summary>An updated details accordion</summary>\n\n  <div class="content">\n    <p>I\'m some content!</p>\n  </div>\n</details>\n')),Object(o.b)("pre",null,Object(o.b)("code",i({parentName:"pre"},{className:"language-css"}),".content {\n  overflow-y: hidden;\n  transition: all 0.4s ease;\n}\n\n.content.is-closed {\n  max-height: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  opacity: 0;\n}\n")),Object(o.b)("p",null,"You may have noticed that we didn’t apply the ",Object(o.b)("inlineCode",{parentName:"p"},"is-closed")," class to the content in the markup. Since we’re using JS to trigger that class, and it hides the content, we only want to apply the class if JS is allowed to run on the page."),Object(o.b)("pre",null,Object(o.b)("code",i({parentName:"pre"},{className:"language-js"}),"for (const content of document.querySelectorAll('details .content')) {\n  content.classList.add('is-closed')\n}\n")),Object(o.b)("p",null,"There’s one last piece we need to set into place before we can trigger the animation. When the element is closed, it has an applied ",Object(o.b)("inlineCode",{parentName:"p"},"max-height")," of ",Object(o.b)("inlineCode",{parentName:"p"},"0"),". Since the ",Object(o.b)("inlineCode",{parentName:"p"},"auto")," declaration is not animatable, we’ll need to apply a defined ",Object(o.b)("inlineCode",{parentName:"p"},"max-height")," to the content when it’s open. For the smoothest possible animation, that ",Object(o.b)("inlineCode",{parentName:"p"},"max-height")," should be the same size as the content height. We can write a simple function to calculate this height and store it as an attribute on the content element."),Object(o.b)("pre",null,Object(o.b)("code",i({parentName:"pre"},{className:"language-js"}),"const getContentHeight = node => {\n  // Force node to display properly\n  node.classList.remove('is-closed')\n  // Calculate height and store it\n  node.setAttribute('data-height', `${node.getBoundingClientRect().height}px`)\n  // Reset node to initial state\n  node.classList.add('is-closed')\n}\n")),Object(o.b)("p",null,"Now that we’ve accounted for that wrinkle, we can handle interaction on the element. In a bit of premature optimization, we’ll ",Object(o.b)("a",i({parentName:"p"},{href:"https://javascript.info/event-delegation"}),"delegate the event")," to the document."),Object(o.b)("pre",null,Object(o.b)("code",i({parentName:"pre"},{className:"language-js"}),"document.addEventListener('click', event => {\n  if (!event.target.closest('summary')) {\n    return\n  }\n\n  event.preventDefault()\n})\n")),Object(o.b)("p",null,"All we’ve told the browser at this point is “if the user has clicked a ",Object(o.b)("inlineCode",{parentName:"p"},"<summary>")," element, don’t do anything”. The default behavior associated with clicking a ",Object(o.b)("inlineCode",{parentName:"p"},"<summary>")," element is to set/remove the ",Object(o.b)("inlineCode",{parentName:"p"},"open")," attribute on its parent ",Object(o.b)("inlineCode",{parentName:"p"},"<details>")," element (the browser then knows to hide/show the content inside of ",Object(o.b)("inlineCode",{parentName:"p"},"<details>")," based on this attribute). The browser won’t wait for the content to animate out before hiding it, so we need to do that manually inside our handler. The code to do this is fairly straightforward, and boils down to toggling attributes and classes in a specific order at a specified time."),Object(o.b)("pre",null,Object(o.b)("code",i({parentName:"pre"},{className:"language-js"}),"// Inside of our event handler\nconst accordion = event.target.closest('details')\nconst content = accordion.querySelector('.content')\n\n// Handle closing\nif (accordion.hasAttribute('open')) {\n  // Animate content out\n  content.style.removeProperty('max-height')\n  content.classList.add('is-closed')\n  // Wait for animation to finish, then remove the `open` attribute\n  window.setTimeout(() => {\n    accordion.removeAttribute('open')\n  }, 400)\n  // Exit handler\n  return\n}\n\n// Handle opening\n// Set the `open` attribute so the content will display\naccordion.setAttribute('open', '')\n// If our content does not have a calculated height, calculate it\nif (!content.hasAttribute('data-height')) {\n  getContentHeight(content)\n}\n// Wait a beat for the height to calculate, then animate content in\nwindow.setTimeout(() => {\n  content.style.maxHeight = content.getAttribute('data-height')\n  content.classList.remove('is-closed')\n}, 0)\n")),Object(o.b)("p",null,Object(o.b)("a",i({parentName:"p"},{href:"https://codepen.io/lowmess/pen/yQjRXy"}),"Putting it all together")," gives us a fully functional, animated accordion component. And because we started with an HTML element that gives us our core functionality by default, a user doesn’t need to have JavaScript running to access the hidden content."),Object(o.b)("iframe",{height:"300",scrolling:"no",title:"<details> Accordion (Final Form)",src:"//codepen.io/lowmess/embed/yQjRXy/?height=300&theme-id=22727&default-tab=result",frameBorder:"no",allowtransparency:"true",allowFullScreen:"true",style:{width:"100%"}},"See the Pen ",Object(o.b)("a",{href:"https://codepen.io/lowmess/pen/yQjRXy/"},"<details&rt; Accordion (Final Form)")," by Alec Lomas (",Object(o.b)("a",{href:"https://codepen.io/lowmess"},"@lowmess"),") on ",Object(o.b)("a",{href:"https://codepen.io"},"CodePen"),"."),Object(o.b)("h2",null,"Extra Credit"),Object(o.b)("p",null,"Although the accordion we’ve created is great, we’ve only covered the baseline functionality. There are a few ways we can change or improve the functionality further, including but not limited to:"),Object(o.b)("h3",null,"Improve Accessibility"),Object(o.b)("p",null,"Because the ",Object(o.b)("inlineCode",{parentName:"p"},"<details>")," element is baked-in to the platform, it should be accessible by default. However, this only applies to browsers that actually support the element. If you have users from browsers that don’t support the element, considerations for accessibility should be taken (adding ",Object(o.b)("inlineCode",{parentName:"p"},"tabindex")," and ",Object(o.b)("inlineCode",{parentName:"p"},"aria-")," attributes, for example)."),Object(o.b)("h3",null,"Handle Window Resizing"),Object(o.b)("p",null,"The vertical expansion animation we’re using to transition accordion content in and out of view is smooth and natural, but there is one issue: it isn’t responsive. Because we only calculate the height of the element once, if the element width changes to the degree that the content flows to a new line, the animation will break. An ideal solution would account for this, and there are a variety of ways we could do so."),Object(o.b)("h3",null,"Increase Interaction Target Size"),Object(o.b)("p",null,"We set container padding on the ",Object(o.b)("inlineCode",{parentName:"p"},"<details>")," element to give the contents of the accordion room to breath. However, this means to open the accordion you have to click or tap on the ",Object(o.b)("inlineCode",{parentName:"p"},"<summary>")," content. Setting the padding on the ",Object(o.b)("inlineCode",{parentName:"p"},"<summary>")," and content container independently should make the accordion a little easier to use."),Object(o.b)("h3",null,"Animate the Twistie"),Object(o.b)("p",null,"Animating the twistie to compliment the content animation would bring another level of polish to our accordion. Extra extra credit: make the animation happen on interaction (instead of relying on the ",Object(o.b)("inlineCode",{parentName:"p"},"[open]")," attribute)."),Object(o.b)("h3",null,"Force Content to Show In Non-Screen Environments"),Object(o.b)("p",null,"Accordions can bring a lot to the table in screen-based environments, however they can also make content inaccessible in non-screen environments (such as when printing or using a screenreader). The content should be accessible in all environments."),Object(o.b)("h3",null,"Only Open One Item At a Time"),Object(o.b)("p",null,"Just kidding. If ",Object(o.b)("a",i({parentName:"p"},{href:"https://www.nngroup.com/articles/accordions-complex-content/"}),"you need an accordion at all"),", you probably ",Object(o.b)("a",i({parentName:"p"},{href:"https://www.smashingmagazine.com/2017/06/designing-perfect-accordion-checklist/#designing-interaction-for-the-accordion"}),"should not do this"),". As it is an action not directly requested by the user, it can cause frustration."),Object(o.b)("h3",null,"Package the Accordion Into a Reusable Component"),Object(o.b)("p",null,"We should probably abstract away all of this markup to ensure consistency and improve DX. Frameworks like React and Vue provide a simple way to do this, but it should also be possible in most templating languages."))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-blog-functional-first-accordions-index-mdx-58dec18a6c36d4791634.js.map