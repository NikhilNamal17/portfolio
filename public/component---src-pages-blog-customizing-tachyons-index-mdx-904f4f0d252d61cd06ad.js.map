{"version":3,"sources":["webpack:///./src/pages/blog/customizing-tachyons/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"weAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,qBAAG,mBAAGC,WAAW,KAAQ,CACrB,KAAQ,wBADT,YAAH,oRAGA,6cACA,0CACA,qMAAoL,mBAAGA,WAAW,KAAQ,CACtM,KAAQ,iDADwK,OAApL,2DAGA,mCACA,qBAAG,mBAAGA,WAAW,KAAQ,CACrB,KAAQ,0BADT,QAAH,uOAEyP,mBAAGA,WAAW,KAAQ,CAC3Q,KAAQ,kDAD6O,sBAFzP,yEAKA,+CACA,0EAAyD,mBAAGA,WAAW,KAAQ,CAC3E,KAAQ,kDAD6C,kCAAzD,kRAE8T,mBAAGA,WAAW,KAAQ,CAChV,KAAQ,kDADkT,8BAF9T,KAKA,sEACA,oGAAmF,mBAAGA,WAAW,KAAQ,CACrG,KAAQ,4CADuE,kCAAnF,0HAEsK,mBAAGA,WAAW,KAAQ,CACxL,KAAQ,oDACP,0BAAYA,WAAW,KAAvB,oBAJL,yNAKA,oDACA,iEAAgD,mBAAGA,WAAW,KAAQ,CAClE,KAAQ,uDADoC,sBAAhD,gSAEgU,kBAAIA,WAAW,KAAf,QAFhU,uEAOJJ,EAAWK,gBAAiB","file":"component---src-pages-blog-customizing-tachyons-index-mdx-904f4f0d252d61cd06ad.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"C:/Users/Nikhil17/Desktop/CodeBase/portfolio/src/templates/BlogPost.jsx\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p><a parentName=\"p\" {...{\n        \"href\": \"http://tachyons.io/\"\n      }}>{`Tachyons`}</a>{`, if you haven’t heard, is incredible. It’s often called an atomic (or functional) CSS library, but if you spend enough time with it, you come to realize it’s something else entirely: a powerful and expressive framework for defining and consuming design system primitives.`}</p>\n    <p>{`The problem, then, is that not every design system will use the same primitives. While Tachyons has some great default settings to help you achieve just about any design you please, you often need to tweak some of those properties: a different color palette, or type scale, or you have sizing needs outside of the scope of the defaults. How should you go about customizing this CSS file that has nearly every property:value pair in CSS?`}</p>\n    <h2>{`K.I.S.S., Stupid`}</h2>\n    <p>{`The simplest solution is the most oft-overlooked: just frickin’ copy the files into your project and start hacking away. The good folks over at Tachyons HQ even cooked up a `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/tachyons-css/tachyons-cli\"\n      }}>{`CLI`}</a>{` so you don’t have to goof around with a build process.`}</p>\n    <h2>{`Get Sassy`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"http://sass-lang.com/\"\n      }}>{`Sass`}</a>{` has come to be the defacto CSS preprocessor. It brings a bunch of goodies to CSS: nesting, functions, and of course, variables. This makes it a great way to consume and customize libraries. And wouldn’t you know it, there’s an `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/tachyons-css/tachyons-sass\"\n      }}>{`official Sass fork`}</a>{` of Tachyons ready to be brought into the fold of your Sass projects.`}</p>\n    <h2>{`Deliver Some Packages`}</h2>\n    <p>{`Did you know that nearly every Tachyons module is `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/browse/keyword/tachyons\"\n      }}>{`available independently on npm`}</a>{`? If you only need to customize a few of them (like, say, the typography scale), you can simply replace the default modules for your custom ones. The downside to this is that you have to import every single module you want to use into your project, but the folks over at `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/eggheadio/tachyons-egghead\"\n      }}>{`Egghead don’t seem to mind`}</a>{`.`}</p>\n    <h2>{`It’s Your Property, Do What You Want With It`}</h2>\n    <p>{`Much like Sass before it, CSS itself is getting variable functionality (and `}<a parentName=\"p\" {...{\n        \"href\": \"https://caniuse.com/#feat=css-variables\"\n      }}>{`browser support is pretty good`}</a>{` too). Wouldn’t it be great if Tachyons used this new syntax to define all of the properties we’d like to update? Meet `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/tachyons-css/tachyons-custom\"\n      }}><inlineCode parentName=\"a\">{`tachyons-custom`}</inlineCode></a>{`, who I’m sure you saw standing just off stage-right over there. Simply include it in your project, and because CSS custom properties follow the cascade, any of your variables will overwrite the Tachyons defaults.`}</p>\n    <h2>{`Generate the Future, Today`}</h2>\n    <p>{`Tachyons HQ is hard at work developing a `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/tachyons-css/tachyons-generator\"\n      }}>{`Tachyons Generator`}</a>{`. This tool allows you to describe your Tachyons variables in JSON and have a full-on version of Tachyons spit back out at you. This is the tool I am most excited about, because it has the potential to completely automate all of the other customization options we just went over while `}<em parentName=\"p\">{`also`}</em>{` being more expressive and powerful. And that’s a beautiful thing.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}